정보처리기사 시험 과목

1과목 소프트웨어 설계
2과목 소프트웨어 개발
3과목 데이터베이스 구축
4과목 프로그래밍 언어 활용
5과목 정보 시스템 구축 관리


정보처리기사 시험과목 

1과목 소프트웨어 설계 
2과목 소프트웨어 개발
3과목 데이터베이스 구축
4과목 프로그래밍 언어 활용
5과목 정보 시스템 구축 관리


총 480쪽

모의고사 10개 
기출문제 10개

정보처리기사 필기 원서 접수 4/16
필기시험 5/9

65일 남음

50일 정도 개념 공부 5회독


1과목 소프트웨어 설계

==================  챕터 1. 소프트웨어 개발 방법론 ============

      1. 소프트웨어
    1) 상용 소프트웨어
        1. 상용 소프트웨어 특징
            상업적 목적이나, 판매를 목적으로 개발되는 소프트웨어
            소프트웨어 개발에 사용된 소스는 배포하지 않는다.
            다양한 형태의 라이선스를 이용하여 기술지원을 보증한다.
         		더보기 Tip
             		- 핵심기술을 축소한 프리웨어, 사용기간을 제한하는 쉐어웨어, 광고를 포함하는 애드웨어 역시 상용 소프트 웨어라고 볼 수 있다.
       2. 상용 소프트웨어 분류체계
	상용소프트웨어는 범용, 특화로 나뉨
             산업 범용 소프트웨어 : 응용 SW, 미들웨어, 시스템SW 등
	 산업 특화 소프트웨어 : 교육, 항공, 교육, 물류 등의 산업 전용

    2) 응용 소프트웨어

      특정 업무를 처리하기 위한 목적으로 작성된 소프트웨어
      애플리케이션, 응용 솔루션 및 서비스 등 다양한 이름으로 불린다.

	1. 응용 소프트웨어의 분류 체계
	      응용 소프트웨어는 6가지
		- 기업용 소프트웨어 : 오피스웨어, ERP, CRM, BI ,SCM
                        - 영상 처리 소프트웨어
		- CG/VR 소프트웨어
		- 자연어 처리 소프트웨어
		- 콘텐츠 배포 소프트웨어
		- 음성 처리 소프트웨어
     
		기업용 소프트웨어 특성
		- 오피스웨어 : 워드, 엑셀, 그룹웨어 등의 일반 업무용
		- ERP : 경영 활동 통합 관리
		- SCM : 물류의 흐름 파악 및 관리	
		- BI : 데이터를 활용하여 의사결정 지원
		- CRM : 고객 특성에 맞는 마케팅 활동 지원
			

    3) 시스템 소프트웨어
	1.시스템 소프트웨어의 정의
	    -  사용자가 손쉽고 효율적으로 컴퓨터 시스템을 사용하도록 돕는 소프트웨어
	    -  일반적으로 하드웨어 제작사에서 제공되며 운영체제와도 같은 의미를 가진다.
	2. 시스템 정의(기본 요소 포함)
                - 컴퓨터 시스템과 같은 의미로 쓰이며 특정한 업무를 처리하기 위해서 중앙처리장치를 중심으로 하드웨어, 소프트웨어의 총칭이다
	    - 컴퓨터 시스템은 기본적으로 입력, 처리, 출력, 제어, 피드백기능을 수행하기 위한 장치들이 존재한다.
	3. 시스템의 성능 평가 기준
	    - 일반적으로 시스템의 목적은 아래의 항목들을 만족시키는 것이다.

	- 처리능력(Throughput) : 단위시간 내 작업 처리량
	- 변환 시간(Turnaround Time) : 작업 의뢰 부터 처리까지의 시간
	- 사용 가능도(Availablily) : 필요할 때 즉시 사용 가능한 정도(가용성)
	- 신뢰도(reliability) : 주어진 문제를 정확하게 해결하는 정도
      	4. 플랫폼(flatform)
      - 특정 시스템을 바탕으로 제공되는 운영체제 및 운영환경을 뜻한다.
      - 무엇을 기준으로 설정하느냐의 따라 플랫폼의 범위가 달라질 수 있다.
	플랫폼의 성능을 측정하는 기준은 가용성, 응답 시간, 사용률, 정확성이 있다. 

	- 가용성(Availability) : 필요할 때 즉시 사용 가능한 정도(사용 가능도)
	- 응답시간(Responseblity) : 명령을 반응하는 시간(처리 시간과 다름)
	- 정확성 : 처리 결과가 기대한 값과 비교해서 정교한지 측정
	- 사용률 : 데이터 처리에 시스템 자원을 사용하는 정도
      4) 소프트웨어 공학
	1. 소프트웨어 공학 정의
               - 최소의 비용과 개발기간으로 최적의 소프트웨어를 도출하기 위한 모든 수단과 도구들의 총칭이다.
	   - 소프트웨어 개발의 품질과 생산성의 향상을 목표로 연구하는 항목
	   - 소프트웨어 공학의 목적은 아래와 같다.
		소프트웨어 공학에 필요한 비용과 기긴의 예측
		하드웨어에 대한 소프트웨어의 상대적 비용 절감
		급속하게 발전하는 하드웨어, 소프트웨어 기술 반영

	2. 소프트웨어 공학의 기본원칙
	    - 현대적인 프로그래밍 기술을 지속적으로 적용한다.
	    - 소프트웨어 품질에 대한 지속적인 검증을 시행한다.
	    - 소프트웨어 개발 단계별 산출물에 대한 명확한 기록을 유지한다.
    5) 소프트웨어 개발 프레임워크
      1.모듈(Module)
	- 프로그램을 기능별로 분할하여 재사용이 가능하게끔 부품화한 것이다.
	- 개발자가 프로그램의 기본틀을 제공하고, 모듈을 활용하여 기능을 구체화 한다.
      2.라이브러리(Library)
	툴킷이라고도 하며, 관련 있는 모듈들을 모아놓은 것이다.
            라이브러리에 존재하는 각 모듈들이 반드시 독립적인 것은 아니다.
	표준 라이브러리 : 프로그램 언어에 내장
	외부 라이브러리 : 별도의 설치를 통해 사용 가능
      3.디자인 패턴
	특정 기능에 대한 문제해결을 위한 추상적인 가이드라인을 제시한것이다.
	프로그램의 세부적인 구현방안을 위해 참조하는 해결 방식을 제시한 것이다.
      4. 소프트웨어 개발 프레임워크
	- 디자인 패턴에 모듈의 장점 및 기능을 결합하여 실제적인 개발의 틀(frame)을 제공한다.
	- 프레임워크가 프로그램의 기본틀을 제공하고, 개발자가 기능을 구체화 하는 제어의 역 흐름이 발생한다.
	- 프로그램의 기반, 구조를 잡아주는 코드의 모임이며, 자연스럽게 특정 디자인패턴을 유도한다.
	- 프로그램의 복잡도가 감소하여, 상호 운용성과 개발 및 변경이 용이해 진다.
      5. 소프트웨어 아키텍처
	- 다수의 프레임워크를 체계적으로 구성, 설명하는 구조체를 말한다
	- 소프트웨어의 설계와 업그레이드를 통제하는 지침과 원칙을 제공한다.
      6. 컴포넌트 
	- 모듈의 형태로 재사용 가능한 확장된 소프트웨어 블럭
	- 일반적인 코딩을 벗어나 마치 레고(블럭)처럼 컴포넌트를 결합하고, 인터페이스를 통해 서로에게 접근한다.
	- 프레임 워크 및 아키텍처가 적용되어 있어 안정적이다.
      7. 재사용 가능한 소프트웨어 요소
	- 소프트웨어의 부분적 요소 또는 전체 영역을 모두 재사용 요소로 복수 있다.
	- 부분적인 코드뿐 아니라 응용된 지식과 데이터 구조도 재사용 가능한 요소에 포함된다.
	- 개발 이후의 테스트 계획, 문서화 방법 및 절차 등도 재사용 가능 요소이다.
      8. 소프트웨어 재사용 방법
	- 소프트웨어 재사용 방법은 합성 중심과 생성 중심으로 나뉜다.
	합성(Composition) 중심 :모듈(블록)을 조립하여 소프트웨어를 완성시키는 블록 구성 방식
	생성(Generation) 중심 : 추상적인 명세를 구체화하여 소프트웨어를 완성시키는 패턴 구성 방식

=== 2.소프트웨어 개발 생명 주기======================

	1) 소프트웨어 개발 수명 주기
	    - 소프트웨어 생명 수명 주기 정의 
		1. 소프트웨어 개발 방법론의 바탕이 된다.
		2. 소프트웨어 개발론을 단계별로 구성한 것으로 단계별 산출물이 존재한다.

더보기 Tip 
소프트웨어 개발 수명주기(SDLC)는 소프트웨어 생명주기, 소프트웨어 공학 페러다임 등으로 다양하게 불리고 있습니다. 소프트웨어 개발 단계를 정의하는 방식으로 생각

	2) 폭포수(Waterfall) 모델
	    - 과거에 가장 폭넓게 사용되던 방식이다.
                - 정해진 단계를 한 번씩만 진행하며 이전 단계로 돌아갈 수 없다. 
	    - 단계별 결과물이 반드시 산출되어야 다음단계로 넘어갈 수 있다.
	    - 제품의 기능보완이 불가능하므로 반드시 메뉴얼 작성이 필수적 이다.

	단계 : 계획 -> 요구분석-> 설계 -> 구현 -> 테스트 -> 유지보수
	TIP 폭포수 모델의 명확한 단점은 문제를 발견해도 되돌릴 수 없다는 것이다.

	3) 프로토타입(Prototype) 모델
	   - 폭포수모델의 단점을 보완한 모델로 시제품(prototype)을 통해최종 결과물을 예측할 수 있다.
	   - 시제품은 사용자와 시스템사이에 인터페이스를 중점을 두어 개발한다.
	   - 시제품은 추후 구현단계에서 골격으로 사용된다.

	단계
	반복 : (요구수집 -> 빠른 설계 -> 시제품 구현 -> 고객 평가 -> 시제품 조정)  -> 구현
	
================ 3월5일===========================

계획 : 
정보처리기사 현재 25쪽 공부중 
업무시간 틈틈히 정보처리기사 개념 공부 
	
업무시간 : 약 20쪽(~약45쪽까지?)

집도착 7시 30분쯤?
헬스 하고 오면 오후 10시?

https://omh1004.atlassian.net/secure/WelcomeToSD.jspa?decorator=jsd-onboarding

Centos7 레드마인 설치법

https://ymkmoon.github.io/Linux-10-CentOS-Redmine/

wget 명령어는 웹에서 파일 다운로드를 도와주는 리눅스 커맨드라인 유틸리티입니
출처: https://sisiblog.tistory.com/225 [달삼쓰뱉:티스토리]
====================================================

컴포넌트와 모듈의 큰 차이점은 컴포넌트는 소프트웨어 역할을 수행 할 수 있다는 점에 있다.


나선형(Spiral) 모델
- 폭포수 모델과 프로토 타입 모델의 장점에 위험 분석 기능을 더한 모델이다.
- 나선을 돌듯이 여러번의 지속적인 개발 과정을 통해 점진적으로 개발하는 모델이다.
- 개발 중에 발생 할 수 있는 위험을 최소화하는 것이 목적이며, 유지보수가 필요 없다.
- 누락 및 추가된 요구사항 반영이 가능하다.

단계

계획 및 목표설정 -> 위험 분석 -> 공학적 개발 및 검증 -> 고객 평가


더보기 TIP 
- 나선형 모델의 핵심은 반복적인 개발사이클을 통해 완성도가 점점 올라 간다는 것에 있다.
- 개발 단계에선 목표 시스템에 맞춰(공학적) 폭포수, 프로토타입 등 다양한 모델을 적용할 수 있습니다.


애자일 모델

- 소프트웨어를 개발할때, 고객소통을 중점을 둔 개발방법론의 통칭이다.
- 짧은 개발 주기를 반복하면서, 고객의 피드백을 소프트웨어에 반영한다.
- 고객의 소통을 통해 작업의 우선순위를 지정하여 개발을 진행한다.
- 애자일 모델을 기반으로 하는 개발 모델은 Scrum, XP, Kanban, crystal,
FDD(기능 주도 개발), ASD(적응형 소프트웨어 개발),DSDM(동적 시스템 개발)등이 있다.
- 절차, 문서, 계획보다 소통, 협업, 변화 대응에 가치를 둔다.

2) 스크럼 모델
	1.스크럼모델 특징

	  1. 스크럼팀을 구성하여 팀 중심으로 개발효율성을 높이는 개발 모델이다.
	  2. 제품책임자, 스크럼마스터, 개발팀으로 구성되어있다.
	  3. 반복적인 스프린트를 통해 제품을 완성시켜 나간다.

              스프린트 : 2~4주정도의 기간내에 하나의 Task를 개발하는 과정
              태스크 : 요구사항(사용자 스토리)에 대해서 개발자(팀)별로 나눈것이다.

	스크럼의 가치는 확약, 존중, 용기, 전념, 정직 등이 있다.

	2. 제품 책임자(Product Owner)
	 - 모든 제품에 대한 책임을 지고, 의사를 결정하는 역할을 한다.
	 - 이해관계자(Skateholder)의 요구사항을 종합하여, 백로그에 작성하고 우선순위를 정한다.
             - 제품 백로그(product backlog) : 우선순위에 따라 개발이 필요한 사용자 스토리 목록을 나열
	 - 스프린트 백로그 : 스프린트에서 개발해야하는 태스크를 나열한 목록
	 - 사용자 스토리 : 사용자의 요구사항을 단어의 나열이 아닌 이야기(시나리오)로 표현한것
	 - 릴리즈 계획 : 제품 백로그에 작성된 사용자 스토리를 가지고 전체 개발 계획 수립
	 - 팀원들은 백로그추가만 가능하며 우선순위를 결정할 수 없다.
더보기 Tip
	제품책임자는 우선순위를 결정하여 어떤파트를 먼저 개발할지 결정할 수 있고, 그 책임과 권한이 유일하다.

	3. 스크럼 마스터(Scrum master)
	- 개발팀의 원할한 개발을 위한 가이드 역할을 한다.
	- 일일 스크럼 회의를 개최할 수 있으며, 작업 중 생기는 오류 요소에 대해 공론화 하여 해결할 수 있도록 처리한다.
	- 팀원들의 상황을 유연하게 대응할 수 있도록 조력자 역할을 하고, 통제의 권한은 가지고 있지 않다.  

	4. 개발팀
	- 제품 책임자와 스크럼 마스터를 제외한 모든 개발에 참여하는 인원이다.
	- 개발자 뿐 아니라 테스터,디자이너도 포함된다.
	- 능동적으로 팀을 구성할 수 있어야 하며 문제를 해결 할 수 있어야한다.


	5. 스크럼 모델 개발 프로세스 

	1차 스프린트 
	스프린트 계획 회의 -> 스프린트 진행-> 일일 스크럼 회의 -> 스프린트 검토회의 (산출물 발생) -> 스프린트 회고

	N차 스프린트를 위의 과정을 되풀이한다.

	- 스프린트 계획 회의 : 스프린트 백로그 작성, 스프린트 일정 계획
	- 스프린트 진행 : 백로그의 담당자 설정
	- 일일 스크럼 회의 : 빠른 시간에 소멸 차트를 이용해서 진행도 파악,테스크 상황에 따라 할일, 진행중, 완료로 변경
	- 스프린트 점토 호의 : 사용자와 함께 프로젝트의 기능을 테스트 하며 피드백을 제품 스프린트에 반영
	- 스프린트 회고 : 스프린트자체의 문제를 점검, 개선점 도출

3) XP(eXtreme Programming) 모델

	XP모델 개발 특징

   		 1. 고객의 참여와 개발 과정 반복을 극대화하여, 개발 생산성 을 높이는 개발 방법론이다.
   		 2. 소규모 인원으로 개발을 할 때 효과적이며, 단계별 단순한 설계를 통해 개발 속도를 향상시킨다.
    		3. XP의 가치는 의사소통, 단순성, 용기, 피드백, 존중이 있다.
	XP 모델 개발 프로세스
	사용자 스토리에 기록된 내용을 바탕으로 릴리즈 계획을 수립하고, 분석된 스토리에 따라 스파이크, 이터레이션을 진행한다.

            소규모 릴리즈: 기능별로 고객의 피드백을 받을수 있도록 소규모 릴리즈로 작게 분할한다.
	스파이크 : 특정 기능을 테스트하기위해 모든조건을 무시하고, 개발한 프로그램
	이터레이션 : 하나의 릴리즈를 1~3주의 개발 기간으로 세분화한 단위
	
더보기 tip

스파이크는 기능을 검증하기 위해 만드는 것으로 다른 요소들을 무시하고, 간단하고 , 단순하게 만들어도 문제가 없다.

	- 스파이크를 통해 검증된 기능을 이터레이션에 올린다.
	- 이터레이션 도중에 스토리가 추가될 수 있다.
	- 이터레이션을 통해 부분 완료된 제품을 고객이 직접 사용자 스토리를 포함된 테스트사항을 테스트를 통해 승인한다.
	- 테스트 과정에서 오류사항, 요구사항이 발생하면 다음 이터레이션에 반영한다.

	- xp의 기본원리

	planning game, small relese, pair coding, whole team, simple design, system metaphor, Test driven development ,Sustainable pace
cotinueous integration, collective Ownership, coding standards

3. 소프트웨어 개발 방법론

    1) 소프트 웨어 개발 방법론 
	- 소프트웨어 개발론 정의
		-소프트웨어 개발 전 과정의 지속적으로 적용할 수 있는 방법, 절차, 기법을 말한다.
		- 소프트웨어 개발함에 있어 생산성과 품질을 향상시킨다.
		- 소프트웨어 공학에서 가장 많이 활요하는 방법론이
    	- 소프트웨어 개발 방법론의 절차 	
		소프트웨어 개발론의 절차는 분석, 설계, 구현, 시험으로 나뉜다.
		분석 : 개발전 준비, 시스템 요구사항 분석, 소프트웨어 요구사항 분석
		설계 : 시스템 설계 , 시스템 구조 및 상세 설계
		구현 : 소프트웨어 코딩 및 단위 시험
		시험 : 소프트웨어 , 시스템 통합 시험 진행, 소프트웨어 설치 및 인수 지원
    	- 소프트웨어 개발 방법론 선정

		- 정형화된 개발 방법론의 특징을 파악
		- 소프트웨어 개발 방법론의 타당성과 적정성을 설정한다.

		타당성 : 개발 절차에 따른 설정
		적정성 : 단계별 산출물에 따른 설정
	
		더보기 TIP
		특정 방법론의 요구사항 분석 절차가 목표 시스템 개발에 적절한지(타당성), 개발과정에서의 산출물이 목표하는 산출물과 일치하는지 (적정성)를 판단합니다.

		- 개발 방법론 선정을 위한 계획서를 작성한다.
		- 선정 계획서를 바탕으로 정성, 정량 평가를 진행하여 개발 방법론을 선정한다. 



    2) 소프트웨어 개발 방법론 종류
	- 구조적 방법론
	   - Yourdon에 의해 개발되어 1970년대까지 가장 많이 적용되었던 방법론이다.
	   - 구조적 분석을 통해 고객의 요구사항을 자료흐름도(DFD)로 표현한다.
	   - 자료 흐름도(DFD) : 프로그램의 기능 단위별 데이터의 흐름을 표한한 구조도 
	   - 자료 사전(DD) : DFD에 표현된 자료 저장소를 구체화
	   - 모듈 중심의 설계를 통해 모듈간의 결합성을 낮춰 독립성을 높인다.
	   - 순차, 선택, 반복의 논리 구조 구성으로 프로그램의 복잡성을 낮춘다.

	 	요구사항 분석 -> 구조적 분석 -> 구조적 설계 -> 구조적 프로그래밍

	  
	 - 정보공학 방법론
	     - 1980년대 등장한 방법론으로 단계별 정형화된 기법들을 통합하여, 데이터 중심적인 방법론이다.
	     - 현행 업무 프로세스 및 시스템을 분석하여 전략 계획을 수립한다.
	     - 업무 영역 분석을 통해 개념적인 수준의 데이터와 프로세스를 설계한다.

		- 데이터 모델링 도구 : 개체-관계 다이어그램(ERD)
		- 프로세스 모델링 도구 : 자료 흐름도, 프로세스 의존도(PDD), 프로세스 계층도(PHD)

		- ERD를 기반으로 분할 다이어그램, 액션 다이어그램, 의존 다이어그램 등을 활용해 실질적인 시스템을 설계한다. 


====================== 3월 6일 =============================
어제 공부한 페이지수 : 5페이지 (25-30)
현재 페이지 31페이지

1과목 : 소프트웨어 설계
2과목 : 소프트웨어 개발
3과목 : 데이터베이스 구축
4과목 : 프로그래밍 언어 활용 
5과목 : 정보 시스템 구축 관리


====================== 3월 8일 =============================
공부한 페이지수 : 5페이지 (25-30)
현재 페이지 30페이지부터 다시 

1과목 : 소프트웨어 설계
2과목 : 소프트웨어 개발
3과목 : 데이터베이스 구축
4과목 : 프로그래밍 언어 활용 
5과목 : 정보 시스템 구축 관리

오늘 말씀

이사야 55:6-7
너희는 여호와를 만날 만한 때에 찾으라 
가까이 계실 때에 그를 부르라
악인은 그의 길을, 불의한자는 그의 생각을 버리고 여호와께로 돌아오라
그리하면 그가 긍휼히 여기시리라
하나님께로 돌아오라 그가 너그러히 용서하시리라



"나의 생각은 너희의 생각과 다르며, 너희의 길은 나의 길과 다르다." 주님께서 하신 말씀이다. 9 "하늘이 땅보다 높듯이, 나의 길은 너희의 길보다 높으며, 나의 생각은 너희의 생각보다 높다.
=========================================================

소프트웨어 -> 소프트웨어 개발론 -> 소프트웨어 개발 방법론 종류

1-30 

소프트웨어 개발 방법론 종류 

1. 구조적 방법론 
	- Youdon에 의해 제시되었으며, 1970년대에 주로 쓰인 개발방법론이다.
	- 구조적 분석을 통해 고객의 요구사항을 자료 흐름도(DFD) 흐름을 통해 표현하였다.
	- 자료 흐름도(DFD) : 프로그램을 기능 단계별 데이터의 흐름으로 나타내었다.
	- 자료 사전(DD) : DFD에 표현된 단어를 자료 저장소로 구체화하였다.
	- 모듈 별로 설계하여 모듈간의 결합도를 낮춰 독립성을 높였다.
	- 순차, 선택, 반복의 논리 구조 구성으로 프로그램 복잡성을 최소화 하였다.
	구조적 방법론 단계
	요구사항 분석-> 구조적 분석 -> 구조적 설계-> 구조적 프로그래밍

2. 정보공학 방법론
	- 1980년대에 등장한 방법론으로 개발 단계별 정형화된 기법을 통합 적용한 데이터 중심의 방법론이다.
	- 현행 시스템프로세스와 시스템을 분석하여, 정보 전략 계획을 세운다.
	- 업무 영역 분석을 통해 개념적인 수준의 데이터와 프로세스를 설계한다.

	데이터 모델링 구조 : 개체-관계 다이어그램(ERD)
	프로세스 모델링 구조 : 자료 구조도(DFD), 프로세스 의존도, 프로세스 계층도(PHD)

	ERD를 기반으로 분석 다이어그램, 액션 다이어그램, 의존다이어그램 등을 활용해 실질적인 시스템을 설계한다.

단계 : 정보 전략 계획 ->  업무 영역 분석 -> 업무 시스템 설계 -> 업무 시스템 구축

** 다이어그램을 통해 실질적인 시스템을 설계한다.

3. 객체지향 방법론 
	- 실체(Entity)를 독립된 형태의 객체(Object)로 표현하고, 객체들 간 메세지 교환을 통해 상호작용하도록 프로그램을 개발하는 방법론이다.
	- 속성 : 객체를 나타내는 성질, 값, 데이터
	- 메소드 : 객체의 속성을 이용한 일련의 동작들
- 데이터 객체를 저장하기 위해서는 테이블로 변환하는 과정이 필요하다.
- 





